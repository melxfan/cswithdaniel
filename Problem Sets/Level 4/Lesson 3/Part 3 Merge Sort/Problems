1. Explain how merge sort works in general.
/*
Merge sort is a divide-and-conquer algorithm based on the idea 
of breaking down a list into several sub-lists until each sublist 
consists of a single element and merging those sublists in a manner 
that results into a sorted list.
*/

2. Perform the merging process manually on {3, 4, 7, 9, 5, 7, 8, 11}.
{3, 4, 7, 9, 5, 6, 8, 11}
{3, 4, 7, 9, 5} {6, 8, 11}
{3, 4, 7, 5, 9}
{3, 4, 5, 7, 9, 6, 8, 11}
{3, 4, 5, 7, 9, 6} {8, 11}
{3, 4, 5, 7, 6, 9} 
{3, 4, 5, 6, 7, 9, 8, 11}
{3, 4, 5, 6, 7, 8, 9, 11}

3. Perform merge sort manually on {7, 3, 9, 4, 8, 7, 5, 11}.
/*
{7, 3} {9, 4, 8, 7, 5, 11}
{3, 7, 9} {4, 8, 7, 5, , 11}
{3, 7, 9, 4} {8, 7, 5, 11}
{3, 7, 4, 9} 
{3, 4, 7, 9, 8, 7, 5, 11}
{3, 4, 7, 8, 9, 7, 5, 11}
{3, 4, 7, 8, 7, 9} (5, 11}
{3, 4, 7, 7, 8, 9, 5, 11}
{3, 4, 7, 7, 8, 5, 9, 11}
{3, 4, 7, 7, 5, 8, 9, 11}
{3, 4, 7, 5, 7, 8, 9, 11}
{3, 4, 5, 7, 7, 8, 9, 11}
*/

4.
  a. Create a method that takes as input an array of int and performs merge sort on the array.
  b. Create a method that takes as input an ArrayList of Integer and performs merge sort on the array.
  
/*
public static void mergeSort(int[] arr, int low, int high)
{
  if (low==high) {return}; 
  int mid = (low + high) / 2
  mergeSort(arr, low, mid);
  mergeSort(arr, mid + 1, high); 
  int lidx = low;
  int ridx = mid + 1;
  int[] temp = new int[high - low + 1];
  int idx = 0; 
}
*/
5.
  a. What is the advantage of using merge sort instead of bubble, selection, and insertion sort?
  /*
  Merge sort is more efficient than bubble, selection, and insertion sort. It is faster when
  working with larger arrays or datasets. 
  */
  b. Can merge sort handle sorting arrays of length 5000000 within a reasonable amount of time?
  //yes


Challenge Problem:

6. An inversion in an array is a pair of elements such that the element to the left is greater than the element to the right.
For example, {1, 3, 2, 5, 4} has 2 inversions (2, 3) and (4, 5), while {5, 4, 3, 2, 1} has 10 inversions (every pair of elements).
Create a method that takes as input an array of int and returns the number of inversions in the array.
Hint: Use merge sort.
