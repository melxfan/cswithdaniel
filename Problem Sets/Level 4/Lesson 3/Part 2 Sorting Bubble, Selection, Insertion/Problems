1.
  a. Explain how bubble sort works in general.
  /*
  A bubble sort works by comparing adjacent pairs of objects in 
  the array. If the objects are not in the correct ordered, 
  they are swapped so that the largest of the two moves up.
  */
  b. Explain how selection sort works in general.
  /*
  The selection sort is a combination of searching and sorting. 
  During each pass, the unsorted element with the smallest 
  (or largest) value is moved to its proper position in the array. 
  The number of times the sort passes through the array is one 
  less than the number of items in the array.
  */
  c. Explain how insertion sort works in general.
  /*
  Insertion sort is a simple sorting algorithm that builds the 
  final sorted array (or list) one item at a time. It is much 
  less efficient on large lists than more advanced algorithms 
  such as quicksort, heapsort, or merge sort.
  */

2. Perform bubble sort, selection sort, and insertion sort manually on the array {6, 9, 8, 4, 1}.

3.
  a. Create a method that takes in and sorts an ArrayList of Double using bubble sort.
  b. Create a method that takes in and sorts an ArrayList of Double using selection sort.
  c. Create a method that takes in and sorts an ArrayList of Double using insertion sort.
  
4. Create a method that uses selection sort to sort an array of int,
except put the largest element at the end instead of putting the smallest element at the beginning.
Example: on the array {6, 9, 8, 4, 1}, after each pass of the selection sort the array should be
{6, 1, 8, 4, 9}
{6, 1, 4, 8, 9}
{4, 1, 6, 8, 9}
{1, 4, 6, 8, 9}

5.
  a. What are the approximate runtimes of bubble sort, selection sort, and insertion sort?
  b. Can bubble sort or selection sort handle sorting arrays of length 5000000 within a reasonable amount of time?
  c. Can insertion sort handle sorting nearly sorted arrays of length 5000000 within a reasonable amount of time?
  d. On average, can insertion sort handle sorting randomized arrays of length 5000000 within a reasonable amound of time?
